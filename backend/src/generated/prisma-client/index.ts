// Code generated by Prisma (prisma@1.28.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  cartItem: (where?: CartItemWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderItem: (where?: OrderItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  cartItems: (
    args?: {
      where?: CartItemWhereInput;
      orderBy?: CartItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CartItem>;
  cartItemsConnection: (
    args?: {
      where?: CartItemWhereInput;
      orderBy?: CartItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CartItemConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemPromise;
  items: (
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Item>;
  itemsConnection: (
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ItemConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  orderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  orderItems: (
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OrderItem>;
  orderItemsConnection: (
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCartItem: (data: CartItemCreateInput) => CartItemPromise;
  updateCartItem: (
    args: { data: CartItemUpdateInput; where: CartItemWhereUniqueInput }
  ) => CartItemPromise;
  updateManyCartItems: (
    args: { data: CartItemUpdateManyMutationInput; where?: CartItemWhereInput }
  ) => BatchPayloadPromise;
  upsertCartItem: (
    args: {
      where: CartItemWhereUniqueInput;
      create: CartItemCreateInput;
      update: CartItemUpdateInput;
    }
  ) => CartItemPromise;
  deleteCartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  deleteManyCartItems: (where?: CartItemWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (
    args: { data: ItemUpdateInput; where: ItemWhereUniqueInput }
  ) => ItemPromise;
  updateManyItems: (
    args: { data: ItemUpdateManyMutationInput; where?: ItemWhereInput }
  ) => BatchPayloadPromise;
  upsertItem: (
    args: {
      where: ItemWhereUniqueInput;
      create: ItemCreateInput;
      update: ItemUpdateInput;
    }
  ) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderItem: (data: OrderItemCreateInput) => OrderItemPromise;
  updateOrderItem: (
    args: { data: OrderItemUpdateInput; where: OrderItemWhereUniqueInput }
  ) => OrderItemPromise;
  updateManyOrderItems: (
    args: {
      data: OrderItemUpdateManyMutationInput;
      where?: OrderItemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOrderItem: (
    args: {
      where: OrderItemWhereUniqueInput;
      create: OrderItemCreateInput;
      update: OrderItemUpdateInput;
    }
  ) => OrderItemPromise;
  deleteOrderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  deleteManyOrderItems: (where?: OrderItemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cartItem: (
    where?: CartItemSubscriptionWhereInput
  ) => CartItemSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderItem: (
    where?: OrderItemSubscriptionWhereInput
  ) => OrderItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission =
  | "ADMIN"
  | "USER"
  | "ITEMCREATE"
  | "ITEMUPDATE"
  | "ITEMDELETE"
  | "PERMISSIONUPDATE";

export type CartItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "price_ASC"
  | "price_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "total_ASC"
  | "total_DESC"
  | "charge_ASC"
  | "charge_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CartItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CartItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  item?: ItemWhereInput;
  user?: UserWhereInput;
  AND?: CartItemWhereInput[] | CartItemWhereInput;
  OR?: CartItemWhereInput[] | CartItemWhereInput;
  NOT?: CartItemWhereInput[] | CartItemWhereInput;
}

export interface ItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  user?: UserWhereInput;
  AND?: ItemWhereInput[] | ItemWhereInput;
  OR?: ItemWhereInput[] | ItemWhereInput;
  NOT?: ItemWhereInput[] | ItemWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  cart_every?: CartItemWhereInput;
  cart_some?: CartItemWhereInput;
  cart_none?: CartItemWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  user?: UserWhereInput;
  AND?: OrderItemWhereInput[] | OrderItemWhereInput;
  OR?: OrderItemWhereInput[] | OrderItemWhereInput;
  NOT?: OrderItemWhereInput[] | OrderItemWhereInput;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  items_every?: OrderItemWhereInput;
  items_some?: OrderItemWhereInput;
  items_none?: OrderItemWhereInput;
  total?: Int;
  total_not?: Int;
  total_in?: Int[] | Int;
  total_not_in?: Int[] | Int;
  total_lt?: Int;
  total_lte?: Int;
  total_gt?: Int;
  total_gte?: Int;
  user?: UserWhereInput;
  charge?: String;
  charge_not?: String;
  charge_in?: String[] | String;
  charge_not_in?: String[] | String;
  charge_lt?: String;
  charge_lte?: String;
  charge_gt?: String;
  charge_gte?: String;
  charge_contains?: String;
  charge_not_contains?: String;
  charge_starts_with?: String;
  charge_not_starts_with?: String;
  charge_ends_with?: String;
  charge_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export type OrderItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CartItemCreateInput {
  quantity?: Int;
  item?: ItemCreateOneInput;
  user: UserCreateOneWithoutCartInput;
}

export interface ItemCreateOneInput {
  create?: ItemCreateInput;
  connect?: ItemWhereUniqueInput;
}

export interface ItemCreateInput {
  title: String;
  description: String;
  image?: String;
  price: Int;
  user: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  cart?: CartItemCreateManyWithoutUserInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface CartItemCreateManyWithoutUserInput {
  create?: CartItemCreateWithoutUserInput[] | CartItemCreateWithoutUserInput;
  connect?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
}

export interface CartItemCreateWithoutUserInput {
  quantity?: Int;
  item?: ItemCreateOneInput;
}

export interface UserCreateOneWithoutCartInput {
  create?: UserCreateWithoutCartInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCartInput {
  name: String;
  email: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
}

export interface CartItemUpdateInput {
  quantity?: Int;
  item?: ItemUpdateOneInput;
  user?: UserUpdateOneRequiredWithoutCartInput;
}

export interface ItemUpdateOneInput {
  create?: ItemCreateInput;
  update?: ItemUpdateDataInput;
  upsert?: ItemUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ItemWhereUniqueInput;
}

export interface ItemUpdateDataInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
  user?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  cart?: CartItemUpdateManyWithoutUserInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface CartItemUpdateManyWithoutUserInput {
  create?: CartItemCreateWithoutUserInput[] | CartItemCreateWithoutUserInput;
  delete?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  connect?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  set?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  disconnect?: CartItemWhereUniqueInput[] | CartItemWhereUniqueInput;
  update?:
    | CartItemUpdateWithWhereUniqueWithoutUserInput[]
    | CartItemUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | CartItemUpsertWithWhereUniqueWithoutUserInput[]
    | CartItemUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
  updateMany?:
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput;
}

export interface CartItemUpdateWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput;
  data: CartItemUpdateWithoutUserDataInput;
}

export interface CartItemUpdateWithoutUserDataInput {
  quantity?: Int;
  item?: ItemUpdateOneInput;
}

export interface CartItemUpsertWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput;
  update: CartItemUpdateWithoutUserDataInput;
  create: CartItemCreateWithoutUserInput;
}

export interface CartItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  AND?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
  OR?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
  NOT?: CartItemScalarWhereInput[] | CartItemScalarWhereInput;
}

export interface CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput;
  data: CartItemUpdateManyDataInput;
}

export interface CartItemUpdateManyDataInput {
  quantity?: Int;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ItemUpsertNestedInput {
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: UserCreateWithoutCartInput;
  update?: UserUpdateWithoutCartDataInput;
  upsert?: UserUpsertWithoutCartInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCartDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface CartItemUpdateManyMutationInput {
  quantity?: Int;
}

export interface ItemUpdateInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
  user?: UserUpdateOneRequiredInput;
}

export interface ItemUpdateManyMutationInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
}

export interface OrderCreateInput {
  items?: OrderItemCreateManyInput;
  total: Int;
  user: UserCreateOneInput;
  charge: String;
}

export interface OrderItemCreateManyInput {
  create?: OrderItemCreateInput[] | OrderItemCreateInput;
  connect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
}

export interface OrderItemCreateInput {
  title: String;
  description: String;
  image: String;
  price: Int;
  quantity?: Int;
  user?: UserCreateOneInput;
}

export interface OrderUpdateInput {
  items?: OrderItemUpdateManyInput;
  total?: Int;
  user?: UserUpdateOneRequiredInput;
  charge?: String;
}

export interface OrderItemUpdateManyInput {
  create?: OrderItemCreateInput[] | OrderItemCreateInput;
  update?:
    | OrderItemUpdateWithWhereUniqueNestedInput[]
    | OrderItemUpdateWithWhereUniqueNestedInput;
  upsert?:
    | OrderItemUpsertWithWhereUniqueNestedInput[]
    | OrderItemUpsertWithWhereUniqueNestedInput;
  delete?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  connect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  set?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  disconnect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  deleteMany?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  updateMany?:
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput;
}

export interface OrderItemUpdateWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput;
  data: OrderItemUpdateDataInput;
}

export interface OrderItemUpdateDataInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
  quantity?: Int;
  user?: UserUpdateOneInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface OrderItemUpsertWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput;
  update: OrderItemUpdateDataInput;
  create: OrderItemCreateInput;
}

export interface OrderItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  AND?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  OR?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  NOT?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
}

export interface OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput;
  data: OrderItemUpdateManyDataInput;
}

export interface OrderItemUpdateManyDataInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
  quantity?: Int;
}

export interface OrderUpdateManyMutationInput {
  total?: Int;
  charge?: String;
}

export interface OrderItemUpdateInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
  quantity?: Int;
  user?: UserUpdateOneInput;
}

export interface OrderItemUpdateManyMutationInput {
  title?: String;
  description?: String;
  image?: String;
  price?: Int;
  quantity?: Int;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  cart?: CartItemUpdateManyWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface CartItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CartItemWhereInput;
  AND?: CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput;
  OR?: CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput;
  NOT?: CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ItemWhereInput;
  AND?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  OR?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  NOT?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface OrderItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderItemWhereInput;
  AND?: OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput;
  OR?: OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput;
  NOT?: OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface CartItem {
  id: ID_Output;
  quantity: Int;
}

export interface CartItemPromise extends Promise<CartItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  item: <T = ItemPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface CartItemSubscription
  extends Promise<AsyncIterator<CartItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  item: <T = ItemSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface Item {
  id: ID_Output;
  title: String;
  description: String;
  image?: String;
  price: Int;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  cart: <T = FragmentableArray<CartItem>>(
    args?: {
      where?: CartItemWhereInput;
      orderBy?: CartItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  cart: <T = Promise<AsyncIterator<CartItemSubscription>>>(
    args?: {
      where?: CartItemWhereInput;
      orderBy?: CartItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CartItemConnection {
  pageInfo: PageInfo;
  edges: CartItemEdge[];
}

export interface CartItemConnectionPromise
  extends Promise<CartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartItemEdge>>() => T;
  aggregate: <T = AggregateCartItemPromise>() => T;
}

export interface CartItemConnectionSubscription
  extends Promise<AsyncIterator<CartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CartItemEdge {
  node: CartItem;
  cursor: String;
}

export interface CartItemEdgePromise
  extends Promise<CartItemEdge>,
    Fragmentable {
  node: <T = CartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartItemEdgeSubscription
  extends Promise<AsyncIterator<CartItemEdge>>,
    Fragmentable {
  node: <T = CartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCartItem {
  count: Int;
}

export interface AggregateCartItemPromise
  extends Promise<AggregateCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartItemSubscription
  extends Promise<AsyncIterator<AggregateCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Order {
  id: ID_Output;
  total: Int;
  charge: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<OrderItem>>(
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  total: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  charge: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  items: <T = Promise<AsyncIterator<OrderItemSubscription>>>(
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  total: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  charge: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderItem {
  id: ID_Output;
  title: String;
  description: String;
  image: String;
  price: Int;
  quantity: Int;
}

export interface OrderItemPromise extends Promise<OrderItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  quantity: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface OrderItemSubscription
  extends Promise<AsyncIterator<OrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemConnection {
  pageInfo: PageInfo;
  edges: OrderItemEdge[];
}

export interface OrderItemConnectionPromise
  extends Promise<OrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderItemEdge>>() => T;
  aggregate: <T = AggregateOrderItemPromise>() => T;
}

export interface OrderItemConnectionSubscription
  extends Promise<AsyncIterator<OrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderItemSubscription>() => T;
}

export interface OrderItemEdge {
  node: OrderItem;
  cursor: String;
}

export interface OrderItemEdgePromise
  extends Promise<OrderItemEdge>,
    Fragmentable {
  node: <T = OrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderItemEdgeSubscription
  extends Promise<AsyncIterator<OrderItemEdge>>,
    Fragmentable {
  node: <T = OrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderItem {
  count: Int;
}

export interface AggregateOrderItemPromise
  extends Promise<AggregateOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderItemSubscription
  extends Promise<AsyncIterator<AggregateOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CartItemSubscriptionPayload {
  mutation: MutationType;
  node: CartItem;
  updatedFields: String[];
  previousValues: CartItemPreviousValues;
}

export interface CartItemSubscriptionPayloadPromise
  extends Promise<CartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartItemPreviousValuesPromise>() => T;
}

export interface CartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartItemPreviousValuesSubscription>() => T;
}

export interface CartItemPreviousValues {
  id: ID_Output;
  quantity: Int;
}

export interface CartItemPreviousValuesPromise
  extends Promise<CartItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
}

export interface CartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<CartItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  image?: String;
  price: Int;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  total: Int;
  charge: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  total: () => Promise<Int>;
  charge: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  total: () => Promise<AsyncIterator<Int>>;
  charge: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderItem;
  updatedFields: String[];
  previousValues: OrderItemPreviousValues;
}

export interface OrderItemSubscriptionPayloadPromise
  extends Promise<OrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderItemPreviousValuesPromise>() => T;
}

export interface OrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderItemPreviousValuesSubscription>() => T;
}

export interface OrderItemPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  image: String;
  price: Int;
  quantity: Int;
}

export interface OrderItemPreviousValuesPromise
  extends Promise<OrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  quantity: () => Promise<Int>;
}

export interface OrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "CartItem",
    embedded: false
  },
  {
    name: "OrderItem",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
